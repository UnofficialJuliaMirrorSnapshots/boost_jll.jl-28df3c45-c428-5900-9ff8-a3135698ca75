# Autogenerated wrapper script for boost_jll for x86_64-linux-gnu
export libboost_thread, libboost_wave, libboost_context, libboost_chrono, libboost_program_options, libboost_timer, libboost_math_c99f, libboost_log, libboost_math_tr1, libboost_regex, libboost_serialization, libboost_date_time, libboost_filesystem, libboost_system, libboost_math_tr1l, libboost_math_c99, libboost_stacktrace_basic, libboost_graph, libboost_prg_exec_monitor, libboost_container, libboost_math_tr1f, libboost_coroutine, libboost_unit_test_framework, libboost_iostreams, libboost_stacktrace_noop, libboost_contract, libboost_wserialization, libboost_random, libboost_log_setup, libboost_atomic, libboost_math_c99l, libboost_type_erasure

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libboost_thread`
const libboost_thread_splitpath = ["lib", "libboost_thread.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_thread_path = ""

# libboost_thread-specific global declaration
# This will be filled out by __init__()
libboost_thread_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_thread = "libboost_thread.so.1.71.0"


# Relative path to `libboost_wave`
const libboost_wave_splitpath = ["lib", "libboost_wave.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_wave_path = ""

# libboost_wave-specific global declaration
# This will be filled out by __init__()
libboost_wave_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_wave = "libboost_wave.so.1.71.0"


# Relative path to `libboost_context`
const libboost_context_splitpath = ["lib", "libboost_context.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_context_path = ""

# libboost_context-specific global declaration
# This will be filled out by __init__()
libboost_context_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_context = "libboost_context.so.1.71.0"


# Relative path to `libboost_chrono`
const libboost_chrono_splitpath = ["lib", "libboost_chrono.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_chrono_path = ""

# libboost_chrono-specific global declaration
# This will be filled out by __init__()
libboost_chrono_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_chrono = "libboost_chrono.so.1.71.0"


# Relative path to `libboost_program_options`
const libboost_program_options_splitpath = ["lib", "libboost_program_options.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_program_options_path = ""

# libboost_program_options-specific global declaration
# This will be filled out by __init__()
libboost_program_options_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_program_options = "libboost_program_options.so.1.71.0"


# Relative path to `libboost_timer`
const libboost_timer_splitpath = ["lib", "libboost_timer.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_timer_path = ""

# libboost_timer-specific global declaration
# This will be filled out by __init__()
libboost_timer_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_timer = "libboost_timer.so.1.71.0"


# Relative path to `libboost_math_c99f`
const libboost_math_c99f_splitpath = ["lib", "libboost_math_c99f.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_math_c99f_path = ""

# libboost_math_c99f-specific global declaration
# This will be filled out by __init__()
libboost_math_c99f_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_math_c99f = "libboost_math_c99f.so.1.71.0"


# Relative path to `libboost_log`
const libboost_log_splitpath = ["lib", "libboost_log.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_log_path = ""

# libboost_log-specific global declaration
# This will be filled out by __init__()
libboost_log_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_log = "libboost_log.so.1.71.0"


# Relative path to `libboost_math_tr1`
const libboost_math_tr1_splitpath = ["lib", "libboost_math_tr1.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_math_tr1_path = ""

# libboost_math_tr1-specific global declaration
# This will be filled out by __init__()
libboost_math_tr1_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_math_tr1 = "libboost_math_tr1.so.1.71.0"


# Relative path to `libboost_regex`
const libboost_regex_splitpath = ["lib", "libboost_regex.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_regex_path = ""

# libboost_regex-specific global declaration
# This will be filled out by __init__()
libboost_regex_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_regex = "libboost_regex.so.1.71.0"


# Relative path to `libboost_serialization`
const libboost_serialization_splitpath = ["lib", "libboost_serialization.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_serialization_path = ""

# libboost_serialization-specific global declaration
# This will be filled out by __init__()
libboost_serialization_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_serialization = "libboost_serialization.so.1.71.0"


# Relative path to `libboost_date_time`
const libboost_date_time_splitpath = ["lib", "libboost_date_time.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_date_time_path = ""

# libboost_date_time-specific global declaration
# This will be filled out by __init__()
libboost_date_time_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_date_time = "libboost_date_time.so.1.71.0"


# Relative path to `libboost_filesystem`
const libboost_filesystem_splitpath = ["lib", "libboost_filesystem.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_filesystem_path = ""

# libboost_filesystem-specific global declaration
# This will be filled out by __init__()
libboost_filesystem_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_filesystem = "libboost_filesystem.so.1.71.0"


# Relative path to `libboost_system`
const libboost_system_splitpath = ["lib", "libboost_system.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_system_path = ""

# libboost_system-specific global declaration
# This will be filled out by __init__()
libboost_system_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_system = "libboost_system.so.1.71.0"


# Relative path to `libboost_math_tr1l`
const libboost_math_tr1l_splitpath = ["lib", "libboost_math_tr1l.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_math_tr1l_path = ""

# libboost_math_tr1l-specific global declaration
# This will be filled out by __init__()
libboost_math_tr1l_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_math_tr1l = "libboost_math_tr1l.so.1.71.0"


# Relative path to `libboost_math_c99`
const libboost_math_c99_splitpath = ["lib", "libboost_math_c99.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_math_c99_path = ""

# libboost_math_c99-specific global declaration
# This will be filled out by __init__()
libboost_math_c99_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_math_c99 = "libboost_math_c99.so.1.71.0"


# Relative path to `libboost_stacktrace_basic`
const libboost_stacktrace_basic_splitpath = ["lib", "libboost_stacktrace_basic.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_stacktrace_basic_path = ""

# libboost_stacktrace_basic-specific global declaration
# This will be filled out by __init__()
libboost_stacktrace_basic_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_stacktrace_basic = "libboost_stacktrace_basic.so.1.71.0"


# Relative path to `libboost_graph`
const libboost_graph_splitpath = ["lib", "libboost_graph.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_graph_path = ""

# libboost_graph-specific global declaration
# This will be filled out by __init__()
libboost_graph_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_graph = "libboost_graph.so.1.71.0"


# Relative path to `libboost_prg_exec_monitor`
const libboost_prg_exec_monitor_splitpath = ["lib", "libboost_prg_exec_monitor.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_prg_exec_monitor_path = ""

# libboost_prg_exec_monitor-specific global declaration
# This will be filled out by __init__()
libboost_prg_exec_monitor_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_prg_exec_monitor = "libboost_prg_exec_monitor.so.1.71.0"


# Relative path to `libboost_container`
const libboost_container_splitpath = ["lib", "libboost_container.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_container_path = ""

# libboost_container-specific global declaration
# This will be filled out by __init__()
libboost_container_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_container = "libboost_container.so.1.71.0"


# Relative path to `libboost_math_tr1f`
const libboost_math_tr1f_splitpath = ["lib", "libboost_math_tr1f.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_math_tr1f_path = ""

# libboost_math_tr1f-specific global declaration
# This will be filled out by __init__()
libboost_math_tr1f_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_math_tr1f = "libboost_math_tr1f.so.1.71.0"


# Relative path to `libboost_coroutine`
const libboost_coroutine_splitpath = ["lib", "libboost_coroutine.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_coroutine_path = ""

# libboost_coroutine-specific global declaration
# This will be filled out by __init__()
libboost_coroutine_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_coroutine = "libboost_coroutine.so.1.71.0"


# Relative path to `libboost_unit_test_framework`
const libboost_unit_test_framework_splitpath = ["lib", "libboost_unit_test_framework.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_unit_test_framework_path = ""

# libboost_unit_test_framework-specific global declaration
# This will be filled out by __init__()
libboost_unit_test_framework_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_unit_test_framework = "libboost_unit_test_framework.so.1.71.0"


# Relative path to `libboost_iostreams`
const libboost_iostreams_splitpath = ["lib", "libboost_iostreams.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_iostreams_path = ""

# libboost_iostreams-specific global declaration
# This will be filled out by __init__()
libboost_iostreams_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_iostreams = "libboost_iostreams.so.1.71.0"


# Relative path to `libboost_stacktrace_noop`
const libboost_stacktrace_noop_splitpath = ["lib", "libboost_stacktrace_noop.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_stacktrace_noop_path = ""

# libboost_stacktrace_noop-specific global declaration
# This will be filled out by __init__()
libboost_stacktrace_noop_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_stacktrace_noop = "libboost_stacktrace_noop.so.1.71.0"


# Relative path to `libboost_contract`
const libboost_contract_splitpath = ["lib", "libboost_contract.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_contract_path = ""

# libboost_contract-specific global declaration
# This will be filled out by __init__()
libboost_contract_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_contract = "libboost_contract.so.1.71.0"


# Relative path to `libboost_wserialization`
const libboost_wserialization_splitpath = ["lib", "libboost_wserialization.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_wserialization_path = ""

# libboost_wserialization-specific global declaration
# This will be filled out by __init__()
libboost_wserialization_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_wserialization = "libboost_wserialization.so.1.71.0"


# Relative path to `libboost_random`
const libboost_random_splitpath = ["lib", "libboost_random.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_random_path = ""

# libboost_random-specific global declaration
# This will be filled out by __init__()
libboost_random_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_random = "libboost_random.so.1.71.0"


# Relative path to `libboost_log_setup`
const libboost_log_setup_splitpath = ["lib", "libboost_log_setup.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_log_setup_path = ""

# libboost_log_setup-specific global declaration
# This will be filled out by __init__()
libboost_log_setup_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_log_setup = "libboost_log_setup.so.1.71.0"


# Relative path to `libboost_atomic`
const libboost_atomic_splitpath = ["lib", "libboost_atomic.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_atomic_path = ""

# libboost_atomic-specific global declaration
# This will be filled out by __init__()
libboost_atomic_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_atomic = "libboost_atomic.so.1.71.0"


# Relative path to `libboost_math_c99l`
const libboost_math_c99l_splitpath = ["lib", "libboost_math_c99l.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_math_c99l_path = ""

# libboost_math_c99l-specific global declaration
# This will be filled out by __init__()
libboost_math_c99l_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_math_c99l = "libboost_math_c99l.so.1.71.0"


# Relative path to `libboost_type_erasure`
const libboost_type_erasure_splitpath = ["lib", "libboost_type_erasure.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libboost_type_erasure_path = ""

# libboost_type_erasure-specific global declaration
# This will be filled out by __init__()
libboost_type_erasure_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libboost_type_erasure = "libboost_type_erasure.so.1.71.0"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global libboost_thread_path = abspath(joinpath(artifact"boost", libboost_thread_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_thread_handle = dlopen(libboost_thread_path)
    push!(LIBPATH_list, dirname(libboost_thread_path))

    global libboost_wave_path = abspath(joinpath(artifact"boost", libboost_wave_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_wave_handle = dlopen(libboost_wave_path)
    push!(LIBPATH_list, dirname(libboost_wave_path))

    global libboost_context_path = abspath(joinpath(artifact"boost", libboost_context_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_context_handle = dlopen(libboost_context_path)
    push!(LIBPATH_list, dirname(libboost_context_path))

    global libboost_chrono_path = abspath(joinpath(artifact"boost", libboost_chrono_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_chrono_handle = dlopen(libboost_chrono_path)
    push!(LIBPATH_list, dirname(libboost_chrono_path))

    global libboost_program_options_path = abspath(joinpath(artifact"boost", libboost_program_options_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_program_options_handle = dlopen(libboost_program_options_path)
    push!(LIBPATH_list, dirname(libboost_program_options_path))

    global libboost_timer_path = abspath(joinpath(artifact"boost", libboost_timer_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_timer_handle = dlopen(libboost_timer_path)
    push!(LIBPATH_list, dirname(libboost_timer_path))

    global libboost_math_c99f_path = abspath(joinpath(artifact"boost", libboost_math_c99f_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_math_c99f_handle = dlopen(libboost_math_c99f_path)
    push!(LIBPATH_list, dirname(libboost_math_c99f_path))

    global libboost_log_path = abspath(joinpath(artifact"boost", libboost_log_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_log_handle = dlopen(libboost_log_path)
    push!(LIBPATH_list, dirname(libboost_log_path))

    global libboost_math_tr1_path = abspath(joinpath(artifact"boost", libboost_math_tr1_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_math_tr1_handle = dlopen(libboost_math_tr1_path)
    push!(LIBPATH_list, dirname(libboost_math_tr1_path))

    global libboost_regex_path = abspath(joinpath(artifact"boost", libboost_regex_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_regex_handle = dlopen(libboost_regex_path)
    push!(LIBPATH_list, dirname(libboost_regex_path))

    global libboost_serialization_path = abspath(joinpath(artifact"boost", libboost_serialization_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_serialization_handle = dlopen(libboost_serialization_path)
    push!(LIBPATH_list, dirname(libboost_serialization_path))

    global libboost_date_time_path = abspath(joinpath(artifact"boost", libboost_date_time_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_date_time_handle = dlopen(libboost_date_time_path)
    push!(LIBPATH_list, dirname(libboost_date_time_path))

    global libboost_filesystem_path = abspath(joinpath(artifact"boost", libboost_filesystem_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_filesystem_handle = dlopen(libboost_filesystem_path)
    push!(LIBPATH_list, dirname(libboost_filesystem_path))

    global libboost_system_path = abspath(joinpath(artifact"boost", libboost_system_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_system_handle = dlopen(libboost_system_path)
    push!(LIBPATH_list, dirname(libboost_system_path))

    global libboost_math_tr1l_path = abspath(joinpath(artifact"boost", libboost_math_tr1l_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_math_tr1l_handle = dlopen(libboost_math_tr1l_path)
    push!(LIBPATH_list, dirname(libboost_math_tr1l_path))

    global libboost_math_c99_path = abspath(joinpath(artifact"boost", libboost_math_c99_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_math_c99_handle = dlopen(libboost_math_c99_path)
    push!(LIBPATH_list, dirname(libboost_math_c99_path))

    global libboost_stacktrace_basic_path = abspath(joinpath(artifact"boost", libboost_stacktrace_basic_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_stacktrace_basic_handle = dlopen(libboost_stacktrace_basic_path)
    push!(LIBPATH_list, dirname(libboost_stacktrace_basic_path))

    global libboost_graph_path = abspath(joinpath(artifact"boost", libboost_graph_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_graph_handle = dlopen(libboost_graph_path)
    push!(LIBPATH_list, dirname(libboost_graph_path))

    global libboost_prg_exec_monitor_path = abspath(joinpath(artifact"boost", libboost_prg_exec_monitor_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_prg_exec_monitor_handle = dlopen(libboost_prg_exec_monitor_path)
    push!(LIBPATH_list, dirname(libboost_prg_exec_monitor_path))

    global libboost_container_path = abspath(joinpath(artifact"boost", libboost_container_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_container_handle = dlopen(libboost_container_path)
    push!(LIBPATH_list, dirname(libboost_container_path))

    global libboost_math_tr1f_path = abspath(joinpath(artifact"boost", libboost_math_tr1f_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_math_tr1f_handle = dlopen(libboost_math_tr1f_path)
    push!(LIBPATH_list, dirname(libboost_math_tr1f_path))

    global libboost_coroutine_path = abspath(joinpath(artifact"boost", libboost_coroutine_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_coroutine_handle = dlopen(libboost_coroutine_path)
    push!(LIBPATH_list, dirname(libboost_coroutine_path))

    global libboost_unit_test_framework_path = abspath(joinpath(artifact"boost", libboost_unit_test_framework_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_unit_test_framework_handle = dlopen(libboost_unit_test_framework_path)
    push!(LIBPATH_list, dirname(libboost_unit_test_framework_path))

    global libboost_iostreams_path = abspath(joinpath(artifact"boost", libboost_iostreams_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_iostreams_handle = dlopen(libboost_iostreams_path)
    push!(LIBPATH_list, dirname(libboost_iostreams_path))

    global libboost_stacktrace_noop_path = abspath(joinpath(artifact"boost", libboost_stacktrace_noop_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_stacktrace_noop_handle = dlopen(libboost_stacktrace_noop_path)
    push!(LIBPATH_list, dirname(libboost_stacktrace_noop_path))

    global libboost_contract_path = abspath(joinpath(artifact"boost", libboost_contract_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_contract_handle = dlopen(libboost_contract_path)
    push!(LIBPATH_list, dirname(libboost_contract_path))

    global libboost_wserialization_path = abspath(joinpath(artifact"boost", libboost_wserialization_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_wserialization_handle = dlopen(libboost_wserialization_path)
    push!(LIBPATH_list, dirname(libboost_wserialization_path))

    global libboost_random_path = abspath(joinpath(artifact"boost", libboost_random_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_random_handle = dlopen(libboost_random_path)
    push!(LIBPATH_list, dirname(libboost_random_path))

    global libboost_log_setup_path = abspath(joinpath(artifact"boost", libboost_log_setup_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_log_setup_handle = dlopen(libboost_log_setup_path)
    push!(LIBPATH_list, dirname(libboost_log_setup_path))

    global libboost_atomic_path = abspath(joinpath(artifact"boost", libboost_atomic_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_atomic_handle = dlopen(libboost_atomic_path)
    push!(LIBPATH_list, dirname(libboost_atomic_path))

    global libboost_math_c99l_path = abspath(joinpath(artifact"boost", libboost_math_c99l_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_math_c99l_handle = dlopen(libboost_math_c99l_path)
    push!(LIBPATH_list, dirname(libboost_math_c99l_path))

    global libboost_type_erasure_path = abspath(joinpath(artifact"boost", libboost_type_erasure_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libboost_type_erasure_handle = dlopen(libboost_type_erasure_path)
    push!(LIBPATH_list, dirname(libboost_type_erasure_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

